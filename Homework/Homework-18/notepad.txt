1.	What is call, apply and bind in JavaScript?
the call() method calls a function with a given this value and arguments provided individually.
function.call(thisArg, arg1, arg2, ...)
The bind() method creates a new function that, when called, has its this keyword set to the provided value, with a given sequence of arguments preceding any provided when the new function is called.
fun.bind(thisArg[, arg1[, arg2[, ...]]])
The apply() method calls a function with a given this value and arguments provided as an array.
fun.apply(thisArg, [argsArray])

2.	What is context in JavaScript?
Context is most often determined by how a function is invoked. When a function is called as a method of an object, this is set to the object the method is called on.
var obj = {
    foo: function() {
        return this;   
    }
};
obj.foo() === obj;
3.	What is lexical scope?
The word "lexical" refers to the fact that lexical scoping uses the location where a variable is declared within the source code to determine where that variable is available. Nested functions have access to variables declared in their outer scope.
4.	What is for in loop?
for (variable in object) {
    code to be executed
}
for...in loop will be executed once for each property.
5.	Difference between prototype and extends in JavaScript?
The extends keyword is used in class declarations or class expressions to create a class which is a child of another class.
class ChildClass extends ParentClass { ... }
The .prototype of the extension must be an Object or null.
The prototype is also an object. All JavaScript objects inherit their properties and methods from their prototype. Objects created with new Date() inherit the Date.prototype.

